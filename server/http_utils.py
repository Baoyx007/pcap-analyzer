# -*- coding: utf-8 -*-
import os

__author__ = 'PCPC'
import re
import codecs
import zlib


# 50:4f:53:54:20:2f:73:64:6b:2e:70:68:70:20:48:54:54:50:2f:31:2e:31
def parse_hexdata(data):
    pure_data = re.compile('\:').sub('', data)
    # print(pure_data)
    # print(codecs.decode(pure_data,'hex'))
    return codecs.decode(pure_data, 'hex')

    # parse_hexdata('50:4f:53:54:20:2f:73:64:6b:2e:70:68:70:20:48:54:54:50:2f:31:2e:31:0d:0a:43:6f:6e:74:65:6e:74:2d:54:79:70:65:3a:20:61:70:70:6c:69:63:61:74:69:6f:6e:2f:78:2d:77:77:77:2d:66:6f:72:6d:2d:75:72:6c:65:6e:63:6f:64:65:64:3b:20:63:68:61:72:73:65:74:3d:75:74:66:2d:38:0d:0a:41:63:63:65:70:74:2d:43:68:61:72:73:65:74:3a:20:55:54:46:2d:38:3b:0d:0a:43:6f:6e:74:65:6e:74:2d:4c:65:6e:67:74:68:3a:20:38:30:34:0d:0a:48:6f:73:74:3a:20:6c:6f:63:2e:6d:61:70:2e:62:61:69:64:75:2e:63:6f:6d:0d:0a:43:6f:6e:6e:65:63:74:69:6f:6e:3a:20:4b:65:65:70:2d:41:6c:69:76:65:0d:0a:55:73:65:72:2d:41:67:65:6e:74:3a:20:41:70:61:63:68:65:2d:48:74:74:70:43:6c:69:65:6e:74:2f:55:4e:41:56:41:49:4c:41:42:4c:45:20:28:6a:61:76:61:20:31:2e:34:29:0d:0a:0d:0a:62:6c:6f:63:3d:76:61:58:72:70:61:69:36:71:50:47:76:38:76:66:39:76:76:58:70:70:2d:37:6e:76:75:72:7a:37:4f:37:70:34:65:72:71:74:4f:6a:77:74:75:6a:6b:6d:49:47:4c:33:70:71:49:30:65:32:53:33:4e:7a:57:31:6f:53:44:79:4d:53:59:79:70:66:4a:7a:73:7a:52:6e:4a:5f:56:78:6f:71:4a:32:4b:65:37:35:5f:37:73:72:37:62:6f:39:50:48:6e:73:4c:48:6d:34:65:58:35:72:5f:79:75:39:71:6d:73:71:61:79:74:70:76:72:6e:72:5f:62:32:79:70:32:64:79:4a:37:4a:6d:63:79:58:6e:5a:4b:62:6d:64:6e:46:6b:4e:6d:4f:31:59:6e:64:6a:49:76:61:6a:6f:2d:49:31:49:4b:4e:79:59:63:72:65:48:6f:6f:4b:6e:35:38:65:53:74:5f:64:33:5a:30:63:53:35:76:5a:44:51:2d:62:6a:6b:5f:61:54:70:6a:4f:57:63:78:59:47:46:6a:50:30:64:65:43:67:70:63:42:46:77:4a:56:67:52:52:43:31:74:65:41:67:74:47:43:78:70:4c:53:30:5a:4b:54:78:49:5a:46:55:4d:61:52:6b:34:54:59:6a:41:67:62:57:34:5f:62:57:67:33:4e:32:49:2d:5a:7a:64:69:61:43:6f:75:64:32:4e:38:4a:69:6b:70:63:79:6c:33:63:48:6f:6c:49:58:56:41:45:30:39:44:55:30:38:54:54:30:42:43:46:30:6b:54:52:45:5a:48:44:51:78:55:44:46:52:43:43:41:4d:46:44:56:64:58:58:77:64:55:71:4b:37:36:70:71:66:36:70:4f:7a:6c:39:5a:71:75:39:5f:4c:67:34:2d:71:44:70:5f:6e:6c:76:76:75:74:73:6f:6d:35:70:72:76:72:34:65:65:4b:69:74:32:4f:69:39:75:48:30:6f:65:44:77:35:4f:4f:69:4e:75:41:67:73:7a:53:7a:4a:7a:4b:6a:38:65:56:6d:70:44:55:78:5a:57:61:68:75:61:39:36:37:66:76:76:50:6e:70:70:2d:37:48:73:37:5f:42:74:70:62:34:70:61:47:4a:33:76:62:59:72:61:32:6b:32:4b:54:77:72:61:4b:67:75:4c:79:64:75:63:79:61:7a:65:6e:45:77:4e:6d:51:6e:4a:65:55:78:39:79:4e:68:74:32:50:32:59:71:4a:67:6f:36:61:33:34:53:48:39:74:74:30:64:6a:68:38:65:32:34:6e:65:43:73:6b:47:6e:52:6b:64:32:42:6d:61:53:38:39:61:57:55:5f:62:6e:77:37:4a:57:45:54:4e:32:4e:7a:4a:30:30:48:58:42:4d:4c:51:41:31:4d:55:56:31:59:55:31:68:46:46:6b:5a:44:47:45:6c:2d:50:47:56:50:56:45:52:4d:48:78:31:4c:56:41:49:42:4f:54:74:30:65:7a:46:74:59:69:64:6a:4c:79:67:78:64:6a:59:32:4b:73:39:70:39:31:50:2e:25:37:43:74:70:25:33:44:33:26:65:78:74:3d:36:76:53:6e:38:59:6e:61:71:4b:76:7a:6f:66:47:6a:39:61:65:6c:6f:4f:32:34:37:2d:79:2d:36:37:53:35:36:4f:48:6e:73:62:6a:68:35:65:62:62:6a:49:5f:65:7a:73:75:44:30:4e:66:31:32:74:4f:43:33:76:50:58:6c:4c:37:4c:78:4a:5f:72:79:38:2d:31:7a:4c:4b:78:6d:38:58:68:79:72:54:74:74:4c:76:4d:34:72:69:30:75:4a:47:31:75:4f:50:47:36:4d:65:50:70:74:75:76:39:49:33:55:70:61:62:55:71:36:53:44:71:5f:54:54:6c:72:6e:73:6c:38:75:58:77:49:50:56:68:63:4c:44:31:61:4b:75:33:72:62:2e:25:37:43:74:70:25:33:44:33')


def get_http_data(frame):
    if not hasattr(frame, 'http'):
        return None
    if hasattr(frame.tcp, 'analysis_retransmission'):
        return None
    layer_http = frame.http
    http_header = str("")
    http_header.join('Layer %s:' % layer_http.layer_name.upper())
    http_header += os.linesep
    http_header += extract_layer_data(layer_http)

    http_body = str()
    if hasattr(frame, 'data'):
        http_body += parse_hexdata(frame.data.tcp_reassembled_data)
        return http_body
    else:
        highest_layer = frame.layers[len(frame.layers) - 1]
        http_body += extract_layer_data(highest_layer)
        return http_header + http_body


def extract_layer_data(layer):
    data = ''
    for field_line in layer._get_all_field_lines():
        if ':' in field_line:
            field_name, field_line = field_line.split(':', 1)
            data += field_name
            data += ':'
        data += field_line
    return data


def decode_chunk_http(http_data, zipped=False):
    http_frame = http_data.split('\r\n\r\n', 1)
    http_body = http_frame[1]
    pack_chunk_data = ''
    for chunk_data in http_body.split('\r\n')[1::2]:
        if chunk_data == '':
            break
        pack_chunk_data += chunk_data
        # print(chunk_data, type(chunk_data))
    decode_data = zlib.decompress(pack_chunk_data,
                                  16 + zlib.MAX_WBITS) if zipped else pack_chunk_data
    return http_frame[0] + '\r\n\r\n' + decode_data
